close all
clear all
clc

% Prompt user to select supplemental function dir to add to path
functionPath = uigetdir(pwd, 'Select the directory containing the required functions');
if functionPath == 0
    disp('User canceled the directory selection');
    return;
end
addpath(functionPath);

% Prompt the user to select the ECoG data directory
ecogDataDir = uigetdir(pwd, 'Select the ECoG data directory');
if ecogDataDir == 0
    disp('User canceled the directory selection');
    return;
end
addpath(ecogDataDir);

% Prompt the user to select the Events data directory
eventsDataDir = uigetdir(pwd, 'Select the Events data directory');
if eventsDataDir == 0
    disp('User canceled the directory selection');
    return;
end
addpath(eventsDataDir);

% Load NatalyaElecMap
load NatalyaElecMap
plotDiagnostics = 'true';

% Prompt the user to select the event file
[eventFile, eventPath] = uigetfile(fullfile(eventsDataDir, '*.mat'), 'Select the event file');
if isequal(eventFile, 0)
    disp('User canceled the event file selection');
    return;
end

% Extract the subject, date, trial type, and trial number from the event file name
eventPattern = '(\w+)_(\d+)_(\w+)_(\d+)-.*_events.mat';
tokens = regexp(eventFile, eventPattern, 'tokens');
if isempty(tokens)
    error('Event file name does not match the expected pattern');
end
subject = tokens{1}{1};
date = tokens{1}{2};
trialType = tokens{1}{3};
trialNumber = tokens{1}{4};

% Construct the output directory name from the extracted tokens
outputDir = sprintf('%s_%s_%s_%s_dataset', subject, date, trialType, trialNumber);

% Create the new folder in the parent directory of the ECoG data directory
[parentDir, ~, ~] = fileparts(ecogDataDir);
saveDir = fullfile(parentDir, outputDir);
if ~exist(saveDir, 'dir')
    mkdir(saveDir);
end

% Construct the corresponding ns6 file name pattern
ns6Pattern = sprintf('%s_%s_%s_%s.ns6', subject, date, trialType, trialNumber);

% Find the corresponding ns6 file
ns6Files = dir(fullfile(ecogDataDir, '*.ns6'));
ns6FileMatch = '';
for i = 1:length(ns6Files)
    if contains(ns6Files(i).name, ns6Pattern)
        ns6FileMatch = ns6Files(i).name;
        break;
    end
end

if isempty(ns6FileMatch)
    error('No corresponding ns6 file found');
end

% Parameters
H.ns5VideoThres = 50;
H.ns5VideoCh = 5;
H.targetSampleRate = 2000;
H.useBlocks = usedTrials;

H.noOfCh = 64;
H.ch2rm = [];
H.neuroThreshold = 1000;
H.neuroChThreshold = 60;
H.junkOffset = 0.05 * H.targetSampleRate;
H.binSizeSec = 0.15;

% Load events
fs_simi = 100;
tmpTriggers = load(fullfile(eventPath, eventFile));
events = tmpTriggers.event;

% Get all event names
eventFields = fieldnames(events);

% Initialize event list with event names and their corresponding frames
eventList = [];
for i = 1:length(eventFields)
    eventName = eventFields{i};
    eventFrames = events.(eventName);
    eventList = [eventList; repmat({eventName}, length(eventFrames), 1), num2cell(eventFrames')];
end

% Sort event list by frame numbers
eventList = sortrows(eventList, 2);

% Load the ECoG data and cut files at event locations
fpath = fullfile(ecogDataDir, ns6FileMatch);
ns6Data = openNSxCervical(fpath);
disp(['Loading NS6 file ' ns6FileMatch])

% Calculate sample rate conversion
ns6SampleRate = ns6Data.MetaTags.SamplingFreq;

% Cut the file at event locations
for i = 1:size(eventList, 1) - 1
    startEvent = eventList{i, 1};
    startFrame = eventList{i, 2};
    endEvent = eventList{i + 1, 1};
    endFrame = eventList{i + 1, 2};

    startSample = startFrame * ns6SampleRate / fs_simi;
    endSample = endFrame * ns6SampleRate / fs_simi;

    % Extract data segment
    dataSegment = ns6Data.Data(:, startSample:endSample);

    % Save data segment
    saveFileName = sprintf('%s_%s%d_%s%d.mat', ns6FileMatch(1:end-4), startEvent, startSample, endEvent, endSample);
    save(fullfile(saveDir, saveFileName), 'dataSegment', '-v7.3');
end

clear ns6Data

disp('Finished processing and cutting ns6 files.')